"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3098],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4074:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const i={},o="Introduction",l={unversionedId:"index/introduction",id:"index/introduction",title:"Introduction",description:"The Series and DataFrame objects rely on index to determine the order of their data.",source:"@site/docs/index/introduction.md",sourceDirName:"index",slug:"/index/introduction",permalink:"/docs/index/introduction",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Reshaping",permalink:"/docs/dataframe/reshaping"},next:{title:"Creating New Objects",permalink:"/docs/generator/creating-new-objects"}},c={},d=[],s={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," objects rely on index to determine the order of their data. "),(0,a.kt)("p",null,"The main type of index in ",(0,a.kt)("inlineCode",{parentName:"p"},"gambas")," is the ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexData")," type, defined as per below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type IndexData struct {\n    index []Index\n    names []string\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"index")," holds the index values, which are of type ",(0,a.kt)("inlineCode",{parentName:"li"},"Index"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"names")," are the names of each index column. For single index, ",(0,a.kt)("inlineCode",{parentName:"li"},"names")," only has one element. For multiindex, ",(0,a.kt)("inlineCode",{parentName:"li"},"names")," will have as many elements as necessary.")),(0,a.kt)("p",null,"You can access the private fields with these accessors:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (id IndexData) Index() []Index {\n    return id.index\n}\n\nfunc (id IndexData) Names() []string {\n    return id.names\n}\n")),(0,a.kt)("p",null,"This is the definition of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Index")," type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Index struct {\n    id    int\n    value []interface{}\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," is the ID of an index item."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," is the value of an index item. For single index, ",(0,a.kt)("inlineCode",{parentName:"li"},"value")," only has one element. For multiindex, ",(0,a.kt)("inlineCode",{parentName:"li"},"value")," will have as many elements as necessary.")),(0,a.kt)("p",null,"You can access the private fields with these accessors:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (i Index) Id() int {\n    return i.id\n}\n\nfunc (i Index) Value() []interface{} {\n    return i.value\n}\n")))}p.isMDXComponent=!0}}]);