"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1957],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,f=p["".concat(o,".").concat(d)]||p[d]||u[d]||l;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const l={},i="Summary Statistics",s={unversionedId:"series/summary-statistics",id:"series/summary-statistics",title:"Summary Statistics",description:"gambas provides summary statistics functions for Series objects. All statistics functions return a StatsResult object defined per below.",source:"@site/docs/series/summary-statistics.md",sourceDirName:"series",slug:"/series/summary-statistics",permalink:"/docs/series/summary-statistics",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Indexing",permalink:"/docs/series/indexing"},next:{title:"Properties",permalink:"/docs/series/properties"}},o={},c=[{value:"Count",id:"count",level:2},{value:"Mean",id:"mean",level:2},{value:"Median",id:"median",level:2},{value:"Std",id:"std",level:2},{value:"Min",id:"min",level:2},{value:"Max",id:"max",level:2},{value:"Q1",id:"q1",level:2},{value:"Q2",id:"q2",level:2},{value:"Q3",id:"q3",level:2},{value:"Describe",id:"describe",level:2}],m={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"summary-statistics"},"Summary Statistics"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"gambas")," provides summary statistics functions for ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," objects. All statistics functions return a ",(0,a.kt)("inlineCode",{parentName:"p"},"StatsResult")," object defined per below. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type StatsResult struct {\n    UsedFunc string\n    Result   float64\n    Err      error\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UsedFunc")," denotes what function has been used. ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," is the result of the calculation. ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," holds any errors that the function has encountered."),(0,a.kt)("p",null,"The data used in the example ",(0,a.kt)("inlineCode",{parentName:"p"},"neo_v2.csv")," is NASA's list of Nearest Earth Objects, sourced from ",(0,a.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/sameepvani/nasa-nearest-earth-objects"},"Kaggle"),"."),(0,a.kt)("h2",{id:"count"},"Count"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Count() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Count")," counts the number of non-NaN elements in a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Count()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Count\n90836\n<nil>\n")),(0,a.kt)("h2",{id:"mean"},"Mean"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Mean() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Mean")," returns the mean of the elements in a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Mean()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Mean\n0.127\n<nil>\n")),(0,a.kt)("h2",{id:"median"},"Median"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Median() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Median")," returns the median of the elements in a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Median()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Median\n0.048\n<nil>\n")),(0,a.kt)("h2",{id:"std"},"Std"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Std() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Std")," returns the sample standard deviation of the elements in a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Std()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Std\n0.299\n<nil>\n")),(0,a.kt)("h2",{id:"min"},"Min"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Min() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Min")," returns the smallest element in a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Min()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Min\n0.0006089126\n<nil>\n")),(0,a.kt)("h2",{id:"max"},"Max"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Max() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Max")," returns the largest element is a column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Max()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Max\n37.8926498379\n<nil>\n")),(0,a.kt)("h2",{id:"q1"},"Q1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Q1() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Q1")," returns the lower quartile (25%) of the elements in a column. This does not include the median during calculation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Q1()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Q1\n0.0192555078\n<nil>\n")),(0,a.kt)("h2",{id:"q2"},"Q2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Q2() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Q2")," returns the middle quartile (50%) of the elements in a column. This accomplishes the same thing as ",(0,a.kt)("inlineCode",{parentName:"p"},"Median"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Q2()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Q2\n0.048\n<nil>\n")),(0,a.kt)("h2",{id:"q3"},"Q3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Q3() StatsResult\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Q3")," returns the upper quartile (75%) of the elements in a column. This does not include the median during calculation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres := col1.Q3()\nfmt.Println(res.UsedFunc)\nfmt.Println(res.Result)\nfmt.Println(res.Err)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Q3\n0.1434019235\n<nil>\n")),(0,a.kt)("h2",{id:"describe"},"Describe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) Describe() ([]StatsResult, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Describe")," runs through the most commonly used statistics functions and prints the output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := col1.Describe()\nif err != nil {\n    fmt.Println(err)\n}\nfmt.Println(res)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Count: 90836\nMean: 0.127\nMedian: 0.048\nStd: 0.299\nMin: 0.0006089126\nMax: 37.8926498379\nQ1: 0.0192555078\nQ2: 0.048\nQ3: 0.1434019235\n[{Count 90836 <nil>} {Mean 0.127 <nil>} {Median 0.048 <nil>} {Std 0.299 <nil>} {Min 0.0006089126 <nil>} {Max 37.8926498379 <nil>} {Q1 0.0192555078 <nil>} {Q2 0.048 <nil>} {Q3 0.1434019235 <nil>}]\n")))}u.isMDXComponent=!0}}]);