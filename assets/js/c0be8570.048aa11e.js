"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4087],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=p(e.components);return t.createElement(c.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,u=d["".concat(c,".").concat(m)]||d[m]||f[m]||o;return n?t.createElement(u,i(i({ref:r},s),{},{components:n})):t.createElement(u,i({ref:r},s))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},624:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=n(7462),a=(n(7294),n(3905));const o={},i="Merging",l={unversionedId:"dataframe/merging",id:"dataframe/merging",title:"Merging",description:"You can merge two DataFame objects.",source:"@site/docs/dataframe/merging.md",sourceDirName:"dataframe",slug:"/dataframe/merging",permalink:"/gambas/docs/dataframe/merging",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Editing Properties",permalink:"/gambas/docs/dataframe/editing-properties"},next:{title:"Sorting",permalink:"/gambas/docs/dataframe/sorting"}},c={},p=[{value:"MergeDfsHorizontally",id:"mergedfshorizontally",level:2},{value:"MergeDfsVertically",id:"mergedfsvertically",level:2}],s={toc:p};function f(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"merging"},"Merging"),(0,a.kt)("p",null,"You can merge two ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFame")," objects."),(0,a.kt)("p",null,"The data used in the example ",(0,a.kt)("inlineCode",{parentName:"p"},"2019.csv")," is UN's 2019 World Happiness Report, sourced from ",(0,a.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/unsdsn/world-happiness"},"Kaggle"),"."),(0,a.kt)("h2",{id:"mergedfshorizontally"},"MergeDfsHorizontally"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) MergeDfsHorizontally(target DataFrame) (DataFrame, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MergeDfsHorizontally")," merges two ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," objects side by side."),(0,a.kt)("p",null,"The target ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," will always be appended to the right of the source ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame"),". Index will reset and become a ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeIndex"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\ndf1, err := df.LocCols("Overall rank", "Country or region", "Score", "GDP per capita", "Social support")\nif err != nil {\n    fmt.Println(err)\n}\n\ndf2, err := df.LocCols("Healthy life expectancy", "Freedom to make life choices", "Generosity", "Perceptions of corruption")\nif err != nil {\n    fmt.Println(err)\n}\n\ndf1.Head(5)\nfmt.Println("")\ndf2.Head(5)\nfmt.Println("")\n\nres, err := df1.MergeDfsHorizontally(df2)\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     |    Overall rank    Country or region    Score    GDP per capita    Social support    \n0    |    1               Finland              7.769    1.34              1.587             \n1    |    2               Denmark              7.6      1.383             1.573             \n2    |    3               Norway               7.554    1.488             1.582             \n3    |    4               Iceland              7.494    1.38              1.624             \n4    |    5               Netherlands          7.488    1.396             1.522             \n\n     |    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \n0    |    0.986                      0.596                           0.153         0.393                        \n1    |    0.996                      0.592                           0.252         0.41                         \n2    |    1.028                      0.603                           0.271         0.341                        \n3    |    1.026                      0.591                           0.354         0.118                        \n4    |    0.999                      0.557                           0.322         0.298                        \n\n     |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \n0    |    1               Finland              7.769    1.34              1.587             0.986                      0.596                           0.153         0.393                        \n1    |    2               Denmark              7.6      1.383             1.573             0.996                      0.592                           0.252         0.41                         \n2    |    3               Norway               7.554    1.488             1.582             1.028                      0.603                           0.271         0.341                        \n3    |    4               Iceland              7.494    1.38              1.624             1.026                      0.591                           0.354         0.118                        \n4    |    5               Netherlands          7.488    1.396             1.522             0.999                      0.557                           0.322         0.298                        \n")),(0,a.kt)("h2",{id:"mergedfsvertically"},"MergeDfsVertically"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) MergeDfsVertically(target DataFrame) (DataFrame, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MergeDfsVertically")," stacks two ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," objects vertically."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\ndf1, err := df.LocRows([]interface{}{0}, []interface{}{1}, []interface{}{2})\nif err != nil {\n    fmt.Println(err)\n}\n\ndf2, err := df.LocRows([]interface{}{3}, []interface{}{4}, []interface{}{5})\nif err != nil {\n    fmt.Println(err)\n}\n\ndf1.Print()\nfmt.Println("")\ndf2.Print()\nfmt.Println("")\n\nres, err := df1.MergeDfsVertically(df2)\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Print()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \n0    |    1               Finland              7.769    1.34              1.587             0.986                      0.596                           0.153         0.393                        \n1    |    2               Denmark              7.6      1.383             1.573             0.996                      0.592                           0.252         0.41                         \n2    |    3               Norway               7.554    1.488             1.582             1.028                      0.603                           0.271         0.341                        \n\n     |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \n3    |    4               Iceland              7.494    1.38              1.624             1.026                      0.591                           0.354         0.118                        \n4    |    5               Netherlands          7.488    1.396             1.522             0.999                      0.557                           0.322         0.298                        \n5    |    6               Switzerland          7.48     1.452             1.526             1.052                      0.572                           0.263         0.343                        \n\n     |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \n0    |    1               Finland              7.769    1.34              1.587             0.986                      0.596                           0.153         0.393                        \n1    |    2               Denmark              7.6      1.383             1.573             0.996                      0.592                           0.252         0.41                         \n2    |    3               Norway               7.554    1.488             1.582             1.028                      0.603                           0.271         0.341                        \n3    |    4               Iceland              7.494    1.38              1.624             1.026                      0.591                           0.354         0.118                        \n4    |    5               Netherlands          7.488    1.396             1.522             0.999                      0.557                           0.322         0.298                        \n5    |    6               Switzerland          7.48     1.452             1.526             1.052                      0.572                           0.263         0.343                        \n")))}f.isMDXComponent=!0}}]);