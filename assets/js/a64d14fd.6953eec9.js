"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7386],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?t.createElement(f,s(s({ref:n},p),{},{components:r})):t.createElement(f,s({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5471:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const i={},s="Properties",o={unversionedId:"series/properties",id:"series/properties",title:"Properties",description:"You can check your Series's properties with these funcitons.",source:"@site/docs/series/properties.md",sourceDirName:"series",slug:"/series/properties",permalink:"/gambas/docs/series/properties",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Summary Statistics",permalink:"/gambas/docs/series/summary-statistics"},next:{title:"Editing Properties",permalink:"/gambas/docs/series/editing-properties"}},l={},c=[{value:"Accessors",id:"accessors",level:2},{value:"ValueCounts",id:"valuecounts",level:2},{value:"IndexHasDuplicateValues",id:"indexhasduplicatevalues",level:2}],p={toc:c};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"properties"},"Properties"),(0,a.kt)("p",null,"You can check your ",(0,a.kt)("inlineCode",{parentName:"p"},"Series"),"'s properties with these funcitons."),(0,a.kt)("h2",{id:"accessors"},"Accessors"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s Series) Data() []interface{}\n\nfunc (s Series) Index() IndexData\n\nfunc (s Series) Name() string\n\nfunc (s Series) Dtype() string\n")),(0,a.kt)("p",null,"The fields of ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," type are private, but ",(0,a.kt)("inlineCode",{parentName:"p"},"gambas")," provides accessors to get these fields."),(0,a.kt)("h2",{id:"valuecounts"},"ValueCounts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) ValueCounts() (Series, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ValueCounts")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," containing the number of unique values in a given ",(0,a.kt)("inlineCode",{parentName:"p"},"Series"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := col1.ValueCounts()\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Head(10)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Data            |    Unique Value Count of est_diameter_min     \n0.0006089126    |    1                                          \n0.0006832112    |    6                                          \n0.0008176265    |    5                                          \n0.0009216265    |    4                                          \n0.0010105434    |    9                                          \n0.0010581689    |    31                                         \n0.001139082     |    4                                          \n0.0011496218    |    3                                          \n0.0011528027    |    1                                          \n0.0011549282    |    1\n")),(0,a.kt)("h2",{id:"indexhasduplicatevalues"},"IndexHasDuplicateValues"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) IndexHasDuplicateValues() (bool, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"IndexHasDuplicateValues")," checks if the ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," have duplicate index values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1.SortByIndex(true)\ncol1.Head(5)\n\nfmt.Println("")\n\nres, err := col1.IndexHasDuplicateValues()\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(res)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"id         |    est_diameter_min     \n2000433    |    23.0438466577        \n2000433    |    23.0438466577        \n2000433    |    23.0438466577        \n2000719    |    2.0443487103         \n2001036    |    37.8926498379        \n\ntrue\n")))}u.isMDXComponent=!0}}]);