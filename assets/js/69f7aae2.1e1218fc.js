"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4482],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>u});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),u=a,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return r?t.createElement(f,i(i({ref:n},p),{},{components:r})):t.createElement(f,i({ref:n},p))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4764:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const o={},i="Indexing",l={unversionedId:"dataframe/indexing",id:"dataframe/indexing",title:"Indexing",description:"You can index your DataFrame with gambas's built-in indexing tools.",source:"@site/docs/dataframe/indexing.md",sourceDirName:"dataframe",slug:"/dataframe/indexing",permalink:"/docs/dataframe/indexing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Printing",permalink:"/docs/dataframe/printing"},next:{title:"Arithmetic Operations",permalink:"/docs/dataframe/arithmetic-operations"}},s={},c=[{value:"LocRows",id:"locrows",level:2},{value:"Example 1: Single index",id:"example-1-single-index",level:3},{value:"Example 2: Multiindex",id:"example-2-multiindex",level:3},{value:"LocRowsItems",id:"locrowsitems",level:2},{value:"LocCol",id:"loccol",level:2},{value:"LocCols",id:"loccols",level:2},{value:"LocColsItems",id:"loccolsitems",level:2},{value:"Loc",id:"loc",level:2}],p={toc:c};function d(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"indexing"},"Indexing"),(0,a.kt)("p",null,"You can index your ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"gambas"),"'s built-in indexing tools."),(0,a.kt)("p",null,"The data used in the example ",(0,a.kt)("inlineCode",{parentName:"p"},"2019.csv")," is UN's 2019 World Happiness Report, sourced from ",(0,a.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/unsdsn/world-happiness"},"Kaggle"),"."),(0,a.kt)("h2",{id:"locrows"},"LocRows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) LocRows(rows ...[]interface{}) (DataFrame, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LocRows")," returns a set of rows as a new ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," object, given a list of labels."),(0,a.kt)("p",null,"You are only allowed to pass in the indices of the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," as rows. For multiindex, pass in either the entire index tuple or just the first index."),(0,a.kt)("h3",{id:"example-1-single-index"},"Example 1: Single index"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), []string{"Country or region"})\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.LocRows([]interface{}{"Canada"}, []interface{}{"United States"}, []interface{}{"Mexico"})\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Print()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Country or region    |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \nCanada               |    9               Canada               7.278    1.365             1.505             1.039                      0.584                           0.285         0.308                        \nUnited States        |    19              United States        6.892    1.433             1.457             0.874                      0.454                           0.28          0.128                        \nMexico               |    23              Mexico               6.595    1.07              1.323             0.861                      0.433                           0.074         0.073                        \n")),(0,a.kt)("h3",{id:"example-2-multiindex"},"Example 2: Multiindex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), []string{"Overall rank", "Country or region"})\nif err != nil {\n    fmt.Println(err)\n}\n\n// this will accomplish the same thing as well:\n// res, err := df.LocRows([]interface{}{9, "Canada"}, []interface{}{19, "United States"}, []interface{}{23, "Mexico"})\nres, err := df.LocRows([]interface{}{9}, []interface{}{19}, []interface{}{23})\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Print()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Country or region    |    Overall rank    Country or region    Score    GDP per capita    Social support    Healthy life expectancy    Freedom to make life choices    Generosity    Perceptions of corruption    \nCanada               |    9               Canada               7.278    1.365             1.505             1.039                      0.584                           0.285         0.308                        \nUnited States        |    19              United States        6.892    1.433             1.457             0.874                      0.454                           0.28          0.128                        \nMexico               |    23              Mexico               6.595    1.07              1.323             0.861                      0.433                           0.074         0.073\n")),(0,a.kt)("h2",{id:"locrowsitems"},"LocRowsItems"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) LocRowsItems(rows ...[]interface{}) ([][]interface{}, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LocRowsItems")," acts the exact same as ",(0,a.kt)("inlineCode",{parentName:"p"},"LocRows"),", but returns data as ",(0,a.kt)("inlineCode",{parentName:"p"},"[][]interface{}")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame"),". For usage, refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"LocRows"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), []string{"Country or region"})\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.LocRowsItems([]interface{}{"Canada"}, []interface{}{"United States"}, []interface{}{"Mexico"})\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(res)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[[9 Canada 7.278 1.365 1.505 1.039 0.584 0.285 0.308] [19 United States 6.892 1.433 1.457 0.874 0.454 0.28 0.128] [23 Mexico 6.595 1.07 1.323 0.861 0.433 0.074 0.073]]\n")),(0,a.kt)("h2",{id:"loccol"},"LocCol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) LocCol(col string) (Series, error) \n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LocCol")," returns a column as a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.LocCol("Country or region")\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     |    Country or region     \n0    |    Finland               \n1    |    Denmark               \n2    |    Norway                \n3    |    Iceland               \n4    |    Netherlands\n")),(0,a.kt)("h2",{id:"loccols"},"LocCols"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) LocCols(cols ...string) (DataFrame, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LocCols")," returns a set of columns as a new ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," object, given a list of labels."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.LocCols("Country or region", "GDP per capita", "Healthy life expectancy")\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     |    Country or region    GDP per capita    Healthy life expectancy    \n0    |    Finland              1.34              0.986                      \n1    |    Denmark              1.383             0.996                      \n2    |    Norway               1.488             1.028                      \n3    |    Iceland              1.38              1.026                      \n4    |    Netherlands          1.396             0.999\n")),(0,a.kt)("h2",{id:"loccolsitems"},"LocColsItems"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) LocColsItems(cols ...string) ([][]interface{}, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LocColsItems")," acts the exact same as ",(0,a.kt)("inlineCode",{parentName:"p"},"LocCols"),", but returns data as ",(0,a.kt)("inlineCode",{parentName:"p"},"[][]interface{}")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame"),". For usage, refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"LocCols"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.LocColsItems("Country or region", "GDP per capita", "Healthy life expectancy")\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(res)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[[Finland Denmark Norway Iceland Netherlands ...] [1.34 1.383 1.488 1.38 1.396 ...] [0.986 0.996 1.028 1.026 0.999 ...]]\n\n(truncated in documentation due to length constraints)\n")),(0,a.kt)("h2",{id:"loc"},"Loc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (df *DataFrame) Loc(cols []string, rows ...[]interface{}) (DataFrame, error)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Loc")," indexes the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," object given a slice of row and column labels, and returns the result as a new ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," object."),(0,a.kt)("p",null,"You are only allowed to pass in indices of the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame")," as rows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "2019.csv"), nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nres, err := df.Loc([]string{"Country or region", "GDP per capita"}, []interface{}{0}, []interface{}{1}, []interface{}{2})\nif err != nil {\n    fmt.Println(err)\n}\n\nres.Print()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     |    Country or region    GDP per capita    \n0    |    Finland              1.34              \n1    |    Denmark              1.383             \n2    |    Norway               1.488\n")))}d.isMDXComponent=!0}}]);