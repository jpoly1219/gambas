"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1573],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>u});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return r?t.createElement(f,o(o({ref:n},c),{},{components:r})):t.createElement(f,o({ref:n},c))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3251:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=r(7462),a=(r(7294),r(3905));const i={},o="Editing Properties",s={unversionedId:"series/editing-properties",id:"series/editing-properties",title:"Editing Properties",description:"You can edit your Series object using these functions.",source:"@site/docs/series/editing-properties.md",sourceDirName:"series",slug:"/series/editing-properties",permalink:"/docs/series/editing-properties",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Properties",permalink:"/docs/series/properties"},next:{title:"Sorting",permalink:"/docs/series/sorting"}},l={},p=[{value:"RenameCol",id:"renamecol",level:2},{value:"RenameIndex",id:"renameindex",level:2}],c={toc:p};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"editing-properties"},"Editing Properties"),(0,a.kt)("p",null,"You can edit your ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," object using these functions."),(0,a.kt)("p",null,"The data used in the example ",(0,a.kt)("inlineCode",{parentName:"p"},"neo_v2.csv")," is NASA's list of Nearest Earth Objects, sourced from ",(0,a.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/sameepvani/nasa-nearest-earth-objects"},"Kaggle"),"."),(0,a.kt)("h2",{id:"renamecol"},"RenameCol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) RenameCol(newName string)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RenameCol")," renames the series."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\nfmt.Println(col1.Name())\n\ncol1.RenameCol("newName")\nfmt.Println(col1.Name())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"est_diameter_min\nnewName\n")),(0,a.kt)("h2",{id:"renameindex"},"RenameIndex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) RenameIndex(newNames map[string]string) error\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RenameIndex")," renames the index of the series."),(0,a.kt)("p",null,"Input should be a map, where key is the index name to change and value is a new name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id", "hazardous"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\nfmt.Println(col1.Index().Names())\n\ncol1.RenameIndex(map[string]string{"id": "newId", "hazardous": "reallyHazardous"})\nfmt.Println(col1.Index().Names())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[id hazardous]\n[newId reallyHazardous]\n")))}m.isMDXComponent=!0}}]);