"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8928],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),m=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=m(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(a),u=r,g=s["".concat(p,".").concat(u)]||s[u]||c[u]||i;return a?t.createElement(g,l(l({ref:n},d),{},{components:a})):t.createElement(g,l({ref:n},d))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}s.displayName="MDXCreateElement"},3886:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var t=a(7462),r=(a(7294),a(3905));const i={},l="Creating New Objects",o={unversionedId:"generator/creating-new-objects",id:"generator/creating-new-objects",title:"Creating New Objects",description:"gambas provides you with generator functions that can create a RangeIndex (an index that spans from 0 to a certain length), a Series, or a DataFrame object. Usually, you won't be creating objects from scratch using the generator functions. Instead, you will use I/O functions to generate objects out of pre-existing data.",source:"@site/docs/generator/creating-new-objects.md",sourceDirName:"generator",slug:"/generator/creating-new-objects",permalink:"/docs/generator/creating-new-objects",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/docs/index/introduction"},next:{title:"Introduction",permalink:"/docs/io/introduction"}},p={},m=[{value:"NewSeries",id:"newseries",level:2},{value:"Example 1: Single index",id:"example-1-single-index",level:3},{value:"Example 2: Multiindex",id:"example-2-multiindex",level:3},{value:"NewDataFrame",id:"newdataframe",level:2},{value:"Example 1: Specifying an index column",id:"example-1-specifying-an-index-column",level:3},{value:"Example 2: Leaving <code>indexCols</code> as <code>nil</code>",id:"example-2-leaving-indexcols-as-nil",level:3},{value:"Example 3: Specifying multiple index columns",id:"example-3-specifying-multiple-index-columns",level:3},{value:"NewIndexData",id:"newindexdata",level:2},{value:"Example 1: Single index",id:"example-1-single-index-1",level:2},{value:"Example 2: Multiindex",id:"example-2-multiindex-1",level:3},{value:"CreateRangeIndex",id:"createrangeindex",level:2}],d={toc:m};function c(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-new-objects"},"Creating New Objects"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"gambas")," provides you with generator functions that can create a RangeIndex (an index that spans from 0 to a certain length), a Series, or a DataFrame object. Usually, you won't be creating objects from scratch using the generator functions. Instead, you will use I/O functions to generate objects out of pre-existing data."),(0,r.kt)("h2",{id:"newseries"},"NewSeries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func NewSeries(data []interface{}, name string, index *IndexData) (Series, error)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NewSeries")," takes in a slice of data, a name, and an IndexData object, returning a Series object and an error. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"data")," should hold items of same data type. Supported data types include ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("p",null,"Leave ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," parameter as ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"NewSeries")," will automatically generate a RangeIndex."),(0,r.kt)("h3",{id:"example-1-single-index"},"Example 1: Single index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myData := []interface{}{"apple", "banana", "cherry"}\nmyName := "Fruit"\n\nmySeries, err := gambas.NewSeries(myData, myName, nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nmySeries.Print()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"     |    Fruit     \n0    |    apple     \n1    |    banana    \n2    |    cherry \n")),(0,r.kt)("h3",{id:"example-2-multiindex"},"Example 2: Multiindex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myData := []interface{}{"apple", "banana", "cherry"}\nmyName := "Fruit"\nmyIndex := [][]interface{}{{"a", "red"}, {"b", "yellow"}, {"c", "red"}}\n\nmyIndexData, err := gambas.NewIndexData(myIndex, []string{"key", "color"})\nif err != nil {\n    fmt.Println(err)\n}\n\nmySeries, err := gambas.NewSeries(myData, myName, &myIndexData)\nif err != nil {\n    fmt.Println(err)\n}\nmySeries.Print()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"key    color     |    Fruit     \na      red       |    apple     \nb      yellow    |    banana    \nc      red       |    cherry\n")),(0,r.kt)("h2",{id:"newdataframe"},"NewDataFrame"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func NewDataFrame(data [][]interface{}, columns []string, indexCols []string) (DataFrame, error)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NewDataFrame")," takes in a 2D slice of data, a list of columns, and a list of index columns, returnign a DataFrame object and an error."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"indexCols")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NewDataFrame")," will generate a RangeIndex."),(0,r.kt)("p",null,"Index will be printed to the side, separated from the other columns with a ",(0,r.kt)("inlineCode",{parentName:"p"},'"|"')," separator."),(0,r.kt)("h3",{id:"example-1-specifying-an-index-column"},"Example 1: Specifying an index column"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myData := [][]interface{}{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nmyCols := []string{"group a", "group b", "group c"}\nmyIndexCols := []string{"group a"}\n\nmyDf, err := gambas.NewDataFrame(myData, myCols, myIndexCols)\nif err != nil {\n    fmt.Println(err)\n}\n\nmyDf.Print()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"group a    |    group a    group b    group c    \n1          |    1          4          7          \n2          |    2          5          8          \n3          |    3          6          9  \n")),(0,r.kt)("h3",{id:"example-2-leaving-indexcols-as-nil"},"Example 2: Leaving ",(0,r.kt)("inlineCode",{parentName:"h3"},"indexCols")," as ",(0,r.kt)("inlineCode",{parentName:"h3"},"nil")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myData := [][]interface{}{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nmyCols := []string{"group a", "group b", "group c"}\n\nmyDf, err := gambas.NewDataFrame(myData, myCols, nil)\nif err != nil {\n    fmt.Println(err)\n}\n\nmyDf.Print()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"     |    group a    group b    group c    \n0    |    1          4          7          \n1    |    2          5          8          \n2    |    3          6          9       \n")),(0,r.kt)("h3",{id:"example-3-specifying-multiple-index-columns"},"Example 3: Specifying multiple index columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myData := [][]interface{}{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nmyCols := []string{"group a", "group b", "group c"}\nmyIndexCols := []string{"group a", "group b"}\n\nmyDf, err := gambas.NewDataFrame(myData, myCols, myIndexCols)\nif err != nil {\n    fmt.Println(err)\n}\n\nmyDf.Print()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"group a    group b    |    group a    group b    group c    \n1          4          |    1          4          7          \n2          5          |    2          5          8          \n3          6          |    3          6          9        \n")),(0,r.kt)("h2",{id:"newindexdata"},"NewIndexData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func NewIndexData(index [][]interface{}, names []string) (IndexData, error)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NewIndexData")," creates a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexData")," object."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"index")," should be a 2D slice that contains index tuples. For single index, the index tuple will contain only one item. For multiindex, the index tuple will contain more than one item."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," are labels for each index. The length should match that of ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," items."),(0,r.kt)("h2",{id:"example-1-single-index-1"},"Example 1: Single index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myIndex := [][]interface{}{{"a"}, {"b"}, {"c"}}\n\nmyIndexData, err := gambas.NewIndexData(myIndex, []string{"alphabet"})\nif err != nil {\n    fmt.Println(err)\n}\n')),(0,r.kt)("h3",{id:"example-2-multiindex-1"},"Example 2: Multiindex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myIndex := [][]interface{}{{"a", "red"}, {"b", "yellow"}, {"c", "red"}}\n\nmyIndexData, err := gambas.NewIndexData(myIndex, []string{"key", "color"})\nif err != nil {\n    fmt.Println(err)\n}\n')),(0,r.kt)("h2",{id:"createrangeindex"},"CreateRangeIndex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func CreateRangeIndex(length int) IndexData\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CreateRangeIndex")," creates a RangeIndex that spans from 0 to a specified ",(0,r.kt)("inlineCode",{parentName:"p"},"length"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"myRangeIndex := CreateRangeIndex(5)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'IndexData{\n    []Index{\n        {0, []interface{}{0}},\n        {1, []interface{}{1}},\n        {2, []interface{}{2}},\n        {3, []interface{}{3}},\n        {4, []interface{}{4}},\n    },\n    []string{""},\n},\n')))}c.isMDXComponent=!0}}]);