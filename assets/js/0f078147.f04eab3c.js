"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const i={},o="Sorting",l={unversionedId:"series/sorting",id:"series/sorting",title:"Sorting",description:"In some occasions, you may need to sort your data in different order. gambas allows you to sort your Series in a couple of different ways.",source:"@site/docs/series/sorting.md",sourceDirName:"series",slug:"/series/sorting",permalink:"/docs/series/sorting",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Editing Properties",permalink:"/docs/series/editing-properties"},next:{title:"Introduction",permalink:"/docs/dataframe/introduction"}},s={},d=[{value:"SortByIndex",id:"sortbyindex",level:2},{value:"SortByGivenIndex",id:"sortbygivenindex",level:2},{value:"SortByValues",id:"sortbyvalues",level:2}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sorting"},"Sorting"),(0,a.kt)("p",null,"In some occasions, you may need to sort your data in different order. ",(0,a.kt)("inlineCode",{parentName:"p"},"gambas")," allows you to sort your ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," in a couple of different ways."),(0,a.kt)("p",null,"The data used in the example ",(0,a.kt)("inlineCode",{parentName:"p"},"neo_v2.csv")," is NASA's list of Nearest Earth Objects, sourced from ",(0,a.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/sameepvani/nasa-nearest-earth-objects"},"Kaggle"),"."),(0,a.kt)("h2",{id:"sortbyindex"},"SortByIndex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) SortByIndex(ascending bool) error\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SortByIndex")," sorts the elements in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," by index."),(0,a.kt)("p",null,"Pass in ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if you want to sort in ascending order, and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," for descending order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\ncol1.Head(5)\n\nfmt.Println("")\n\ncol1.SortByIndex(true)\ncol1.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"id         |    est_diameter_min     \n2162635    |    1.1982708007         \n2277475    |    0.2658               \n2512244    |    0.7220295577         \n3596030    |    0.096506147          \n3667127    |    0.2550086879         \n\nid         |    est_diameter_min     \n2000433    |    23.0438466577        \n2000433    |    23.0438466577        \n2000433    |    23.0438466577        \n2000719    |    2.0443487103         \n2001036    |    37.8926498379\n")),(0,a.kt)("h2",{id:"sortbygivenindex"},"SortByGivenIndex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) SortByGivenIndex(index IndexData, withId bool) error\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SortByGivenIndex")," sorts the ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," by a given index."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"withId")," should be left as ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". This field is only used for internal purposes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\ncol1.Head(5)\n\nfmt.Println("")\n\n// create a custom index by shuffling the original one\nciData := make([][]interface{}, len(col1.Data()))\nfor i := range col1.Data() {\n    ciData[i] = append(ciData[i], col1.Index().Index()[rand.Intn(len(col1.Data()))].Value()...)\n}\n\nci, err := gambas.NewIndexData(ciData, []string{"customId"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1.SortByGivenIndex(ci, false)\ncol1.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"id         |    est_diameter_min     \n2162635    |    1.1982708007         \n2277475    |    0.2658               \n2512244    |    0.7220295577         \n3596030    |    0.096506147          \n3667127    |    0.2550086879         \n\ncustomId    |    est_diameter_min     \n3321492     |    0.0930154254         \n54053951    |    0.0253837029         \n3164412     |    0.0802703167         \n2326291     |    0.4174024334         \n3445668     |    0.4135756649\n")),(0,a.kt)("h2",{id:"sortbyvalues"},"SortByValues"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Series) SortByValues(ascending bool) error\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SortByValues")," sorts the ",(0,a.kt)("inlineCode",{parentName:"p"},"Series")," by its values."),(0,a.kt)("p",null,"Pass in ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if you want to sort in ascending order, and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," for descending order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'df, err := gambas.ReadCsv(filepath.Join(".", "neo_v2.csv"), []string{"id"})\nif err != nil {\n    fmt.Println(err)\n}\n\ncol1, err := df.LocCol("est_diameter_min")\nif err != nil {\n    fmt.Println(err)\n}\ncol1.Head(5)\n\nfmt.Println("")\n\ncol1.SortByValues(true)\ncol1.Head(5)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"id         |    est_diameter_min     \n2162635    |    1.1982708007         \n2277475    |    0.2658               \n2512244    |    0.7220295577         \n3596030    |    0.096506147          \n3667127    |    0.2550086879         \n\nid          |    est_diameter_min     \n3430497     |    0.0006089126         \n54106298    |    0.0006832112         \n54106298    |    0.0006832112         \n54106298    |    0.0006832112         \n54106298    |    0.0006832112\n")))}p.isMDXComponent=!0}}]);